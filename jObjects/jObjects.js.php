<?php

header('Content-Type: text/javascript; charset=utf-8');

class jObjectsJS
{
    public static function dump()
    {
        $jObjectsJSInstance = new jObjectsJS();
        $jObjectsJS = $jObjectsJSInstance->__toString();

        echo $jObjectsJS;
    }

    protected function getClassConstructor( &$reflection )
    {
        $className   = $reflection->getName();
        $constructor = $reflection->getConstructor();

        list($parametersString, $defaultsString) = $this->getClassMethodParameters($constructor);

        $classDoc = $reflection->getDocComment();

        if ( strlen($classDoc) > 0 )
            $classDoc = "$classDoc\n";

        return $classDoc . $className . ' = function(' . $parametersString . ')' . "\n" . '{' . $defaultsString . "\n" . '    this.instance = jObject(\'' . $className . '\', arguments);' . "\n" . '};';
    }

    protected function getClassMethods( &$reflection )
    {
        $className = $reflection->getName();

        $methods = $reflection->getMethods();
        $methodsArray = array();
        $methodsString = '';

        foreach ( $methods as $method )
        {
            $methodName = $method->getName();

            if ( strncmp($methodName, '__', 2) != 0 && $method->isPublic() )
            {
                $methodFunction = $this->getClassMethod($method);
                $methodDoc = $method->getDocComment();

                if ( strlen($methodDoc) > 0 )
                    $methodDoc = "\n    $methodDoc";

                $methodsArray[] = "$methodDoc\n    $methodName : $methodFunction";
            }
        }

        if ( sizeof($methodsArray) > 0 )
        {
            $methodsString = implode(", \n", $methodsArray);
            $methodsString = "$methodsString\n";
        }

        return "\n$className.prototype = {{$methodsString}};";
    }

    protected function getClassMethod( &$method )
    {
        $methodName = $method->getName();
        $methodParameters = $this->getClassMethodParameters($method);

        $parametersString = $methodParameters[0];
        $defaultsString   = $methodParameters[1];

        return "function($parametersString)\n    {{$defaultsString}\n        return this.instance.call('$methodName', arguments);\n    }";
    }

    protected function getClassMethodParameters( &$method )
    {
        $parametersString  = '';
        $defaultsString    = '';

        if ( $method )
        {
            $parameters = $method->getParameters();

            $parametersArray = array();
            $defaultsArray = array();

            foreach ( $parameters as $parameter )
            {
                $parameterName = $parameter->getName();
                $parametersArray[] = $parameterName;

                if ( $parameter->isDefaultValueAvailable() )
                {
                    $parameterDefault = $parameter->getDefaultValue();

                    if ( is_string($parameterDefault) )
                        $parameterDefault = '"' . $parameterDefault . '"';
                    elseif ( is_bool($parameterDefault) )
                        $parameterDefault = ( $parameterDefault ) ? 'true' : 'false';
                    elseif ( is_null($parameterDefault) )
                        $parameterDefault = 'null';

                    $tabs = ( $method->isConstructor() ) ? '    ' : '        ';
                    $defaultsArray[] = "\n{$tabs}var $parameterName = $parameterName || $parameterDefault;";
                }
            }

            if ( sizeof($parametersArray) > 0 )
            {
                $parametersString = implode(', ', $parametersArray);
                $parametersString = " $parametersString ";
            }

            if ( sizeof($defaultsArray) > 0 )
            {
                $defaultsString = implode('', $defaultsArray);
                $defaultsString = "$defaultsString\n";
            }
        }

        return array($parametersString, $defaultsString);
    }

    public function __toString()
    {
        $classes = get_declared_classes();
        $classesArray = array();

        foreach ( $classes as $className )
        {
            $reflection = new ReflectionClass($className);

            if ( $reflection->hasProperty('jObjects') )
            {
                $classConstructor = $this->getClassConstructor($reflection);
                $classMethods = $this->getClassMethods($reflection);

                $classesArray[] = $classConstructor . "\n" . $classMethods;
            }
        }

        if ( sizeof($classesArray) > 0 )
        {
            $classesString = implode("\n\n", $classesArray);
            $classesString = "(function(){\n/**\n * AutoGenerated File by jObjects\n */\n\n{$classesString}\n})();";

            return $classesString;
        }

        return '';
    }
}

jObjectsJS::dump();